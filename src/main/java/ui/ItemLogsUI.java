/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import controller.User;
import network.Checkout;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utilities.SearchDiscriminant;
import utilities.IOOperations;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import network.BusinessItems;
import network.Logs;

/**
 *
 * @author Felipe
 */
public class ItemLogsUI extends javax.swing.JFrame {

    public ItemLogsUI() {
        initComponents();

        setRateTypeSelector();
        setStateSelector();
        setEmployeeSelector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonGroup1 = new javax.swing.ButtonGroup();
        vehicleLogsTitleLabel = new javax.swing.JLabel();
        filtersAndSortContainer = new javax.swing.JPanel();
        filtersHeader = new javax.swing.JLabel();
        itemTypeSelector = new javax.swing.JComboBox<>();
        itemStateSelector = new javax.swing.JComboBox<>();
        itemCheckoutBySelector = new javax.swing.JComboBox<>();
        searchLogs = new javax.swing.JButton();
        logsContainer = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        logsView = new javax.swing.JScrollPane();
        logsViewTable = new javax.swing.JTable();
        addLogsPane = new javax.swing.JPanel();
        goBackButton = new javax.swing.JButton();
        developerLabel = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        vehicleLogsTitleLabel.setFont(new java.awt.Font("Gill Sans MT Condensed", 2, 24)); // NOI18N
        vehicleLogsTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vehicleLogsTitleLabel.setText("REGISTROS");

        filtersHeader.setFont(new java.awt.Font("Gill Sans MT Condensed", 2, 18)); // NOI18N
        filtersHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        filtersHeader.setText("FILTROS Y ORDENAMIENTO");

        itemTypeSelector.setFont(new java.awt.Font("Gill Sans MT Condensed", 2, 18)); // NOI18N
        itemTypeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {""}));
        itemTypeSelector.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        itemStateSelector.setFont(new java.awt.Font("Gill Sans MT Condensed", 2, 18)); // NOI18N
        itemStateSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {""}));
        itemStateSelector.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        itemCheckoutBySelector.setFont(new java.awt.Font("Gill Sans MT Condensed", 2, 18)); // NOI18N
        itemCheckoutBySelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        itemCheckoutBySelector.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        searchLogs.setBackground(new java.awt.Color(0, 153, 51));
        searchLogs.setFont(new java.awt.Font("Gill Sans MT Condensed", 2, 18)); // NOI18N
        searchLogs.setForeground(new java.awt.Color(255, 255, 255));
        searchLogs.setText("BUSCAR");
        searchLogs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchLogsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filtersAndSortContainerLayout = new javax.swing.GroupLayout(filtersAndSortContainer);
        filtersAndSortContainer.setLayout(filtersAndSortContainerLayout);
        filtersAndSortContainerLayout.setHorizontalGroup(
            filtersAndSortContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filtersAndSortContainerLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(filtersAndSortContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(itemCheckoutBySelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itemStateSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itemTypeSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchLogs, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(filtersHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        filtersAndSortContainerLayout.setVerticalGroup(
            filtersAndSortContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersAndSortContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filtersHeader)
                .addGap(33, 33, 33)
                .addComponent(itemTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(itemStateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(itemCheckoutBySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchLogs)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        logsContainer.setBackground(new java.awt.Color(0, 153, 255));

        logsViewTable.setAutoCreateRowSorter(true);
        logsViewTable.setFont(new java.awt.Font("Gill Sans MT Condensed", 2, 18)); // NOI18N
        logsViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TIPO", "COLOR", "ESTADO", "ESTADO SALIDA", "ENTRADA POR", "SALIDA POR", "DUEÃ‘O", "PLACA", "HORA ENTRADA", "HORA SALIDA", "COBRO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        logsViewTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        logsViewTable.setShowGrid(true);
        logsViewTable.getTableHeader().setReorderingAllowed(false);
        logsView.setViewportView(logsViewTable);
        if (logsViewTable.getColumnModel().getColumnCount() > 0) {
            logsViewTable.getColumnModel().getColumn(0).setResizable(false);
            logsViewTable.getColumnModel().getColumn(0).setPreferredWidth(15);
            logsViewTable.getColumnModel().getColumn(1).setResizable(false);
            logsViewTable.getColumnModel().getColumn(1).setPreferredWidth(30);
            logsViewTable.getColumnModel().getColumn(2).setResizable(false);
            logsViewTable.getColumnModel().getColumn(2).setPreferredWidth(30);
            logsViewTable.getColumnModel().getColumn(3).setResizable(false);
            logsViewTable.getColumnModel().getColumn(3).setPreferredWidth(50);
            logsViewTable.getColumnModel().getColumn(4).setResizable(false);
            logsViewTable.getColumnModel().getColumn(4).setPreferredWidth(50);
            logsViewTable.getColumnModel().getColumn(5).setResizable(false);
            logsViewTable.getColumnModel().getColumn(5).setPreferredWidth(50);
            logsViewTable.getColumnModel().getColumn(6).setResizable(false);
            logsViewTable.getColumnModel().getColumn(6).setPreferredWidth(50);
            logsViewTable.getColumnModel().getColumn(7).setResizable(false);
            logsViewTable.getColumnModel().getColumn(7).setPreferredWidth(50);
            logsViewTable.getColumnModel().getColumn(8).setResizable(false);
            logsViewTable.getColumnModel().getColumn(8).setPreferredWidth(30);
            logsViewTable.getColumnModel().getColumn(9).setResizable(false);
            logsViewTable.getColumnModel().getColumn(10).setResizable(false);
            logsViewTable.getColumnModel().getColumn(11).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logsView, javax.swing.GroupLayout.DEFAULT_SIZE, 1092, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logsView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
        );

        logsContainer.addTab("REGISTROS", jPanel1);

        javax.swing.GroupLayout addLogsPaneLayout = new javax.swing.GroupLayout(addLogsPane);
        addLogsPane.setLayout(addLogsPaneLayout);
        addLogsPaneLayout.setHorizontalGroup(
            addLogsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1092, Short.MAX_VALUE)
        );
        addLogsPaneLayout.setVerticalGroup(
            addLogsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 363, Short.MAX_VALUE)
        );

        logsContainer.addTab("AGREGAR REGISTRO", addLogsPane);

        goBackButton.setBackground(new java.awt.Color(204, 0, 0));
        goBackButton.setForeground(new java.awt.Color(255, 255, 255));
        goBackButton.setText("<-");
        goBackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        developerLabel.setFont(new java.awt.Font("Gill Sans MT Condensed", 2, 18)); // NOI18N
        developerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        developerLabel.setText("CASANAS SOFTWARE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vehicleLogsTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filtersAndSortContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(logsContainer)
                        .addContainerGap(14, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(developerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vehicleLogsTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filtersAndSortContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(goBackButton)
                    .addComponent(developerLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        DashboardUI dashboard = new DashboardUI();
        dashboard.setVisible(true);
        dashboard.setLocationRelativeTo(null);
        this.setVisible(false);
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void searchLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchLogsActionPerformed
        String[][] logsData = requestLogsData();
        fillTable(logsData);
    }//GEN-LAST:event_searchLogsActionPerformed

    private void setRateTypeSelector() {
        ArrayList<Object> ratesData = BusinessItems.getRatesName(User.getBusiness_id());
        ArrayList<String> ratesName = (ArrayList<String>) ratesData.get(1);

        if (ratesName != null && !ratesName.isEmpty()) {
            for (String rate : ratesName) {
                itemTypeSelector.addItem(rate.toUpperCase());
            }
        } else {
            System.out.println("No se encontraron tarifas para agregar al selector.");
        }
    }

    private void setStateSelector() {
        ArrayList<Object> states = BusinessItems.getStatesName();
        ArrayList<String> stateName = (ArrayList<String>) states.get(1);

        if (stateName != null && !stateName.isEmpty()) {
            for (String state : stateName) {
                itemStateSelector.addItem(state.toUpperCase());
            }
        } else {
            System.out.println("No se encontraron estados para agregar al selector.");
        }
    }

    private void setEmployeeSelector() {
        // Obtiene los datos de los empleados desde la base de datos
        List<String[]> employees = BusinessItems.getEmployesIDs();

        if (employees != null && !employees.isEmpty()) {
            for (String[] employee : employees) {
                // Construye una representaciÃ³n legible del empleado para el JComboBox
                String employeeDisplay = String.format("%s - %s %s", employee[0], employee[1].toUpperCase(), employee[2].toUpperCase());
                itemCheckoutBySelector.addItem(employeeDisplay);
            }
        } else {
            System.out.println("No se encontraron empleados para agregar al selector.");
        }
    }

    private String[][] requestLogsData() {
        // Inicializar array para los criterios de bÃºsqueda: (1)Tipo de vehÃ­culo, (2)Estado, (3)Usuario de salida
        String[] fields = new String[3];

        try {
            // Obtener y asignar valores seleccionados con operadores ternarios mÃ¡s legibles
            fields[0] = getSelectedItemValue(itemTypeSelector);
            fields[1] = getSelectedItemValue(itemStateSelector);
            fields[2] = getSelectedItemValue(itemCheckoutBySelector);

            // Verificar cuÃ¡les campos estÃ¡n llenos
            Boolean[] notEmptyFields = SearchDiscriminant.notEmptyFields(fields);

            // Convertir campos de texto a sus cÃ³digos correspondientes
            fields[0] = IOOperations.parseVehicleTypeToCode(fields[0]);
            fields[1] = IOOperations.parseVehicleStateToCode(fields[1]);

            // Obtener registros de la base de datos
            return new Logs().queryLogs(notEmptyFields, fields);

        } catch (Exception ex) {
            // Manejo de errores: loguear y devolver nulo
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, "Error al solicitar datos de logs", ex);
            return null;
        }
    }

// MÃ©todo auxiliar para obtener el valor seleccionado de un JComboBox
    private String getSelectedItemValue(JComboBox<?> comboBox) {
        return comboBox.getSelectedItem() != null
                ? comboBox.getSelectedItem().toString().toLowerCase()
                : "";
    }

    public void fillTable(String[][] logsData) {
        if (logsData == null || logsData.length == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron registros");
            return;
        }

        // Instancia el modelo de la tabla
        DefaultTableModel tableModel = (DefaultTableModel) logsViewTable.getModel();

        // Limpia la tabla para eliminar elementos anteriores
        clearTable(tableModel);

        // Agrega las filas a la tabla
        for (String[] rowData : logsData) {
            Object[] row = new Object[12];
            System.arraycopy(rowData, 0, row, 0, rowData.length);
            row[11] = "$" + row[11];  // Formato de valor monetario
            tableModel.addRow(row);
        }
    }

    public void clearTable(DefaultTableModel tableModel) {
        tableModel.setRowCount(0);  // Resetea directamente las filas de la tabla
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemLogsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemLogsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemLogsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemLogsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemLogsUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addLogsPane;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel developerLabel;
    private javax.swing.JPanel filtersAndSortContainer;
    private javax.swing.JLabel filtersHeader;
    private javax.swing.JButton goBackButton;
    private javax.swing.JComboBox<String> itemCheckoutBySelector;
    private javax.swing.JComboBox<String> itemStateSelector;
    private javax.swing.JComboBox<String> itemTypeSelector;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTabbedPane logsContainer;
    private javax.swing.JScrollPane logsView;
    private javax.swing.JTable logsViewTable;
    private javax.swing.JButton searchLogs;
    private javax.swing.JLabel vehicleLogsTitleLabel;
    // End of variables declaration//GEN-END:variables

}
