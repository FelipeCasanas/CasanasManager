/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package graphics;

import connection.QueryManagment;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import managmentCore.RatesManagment;
import managmentCore.UserManagment;
import utilities.EmptyPlaces;
import utilities.FormatDate;
import utilities.ParseUserInputs;

/**
 *
 * @author Felipe
 */
public class VehicleCheckOut extends javax.swing.JFrame {

    /**
     * Creates new form VehicleCheckIn
     */
    public VehicleCheckOut() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        vehicleCheckInTitleLabel = new javax.swing.JLabel();
        vehiclesDepartureVehicleState = new javax.swing.JComboBox<>();
        vehiclesDepartureOwnerID = new javax.swing.JTextField();
        vehiclesDepartureCarPlate = new javax.swing.JTextField();
        vehiclesDepartureButton = new javax.swing.JButton();
        goBackButton = new javax.swing.JButton();
        developerLabel = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        vehicleCheckInTitleLabel.setFont(new java.awt.Font("Gill Sans MT Condensed", 1, 20)); // NOI18N
        vehicleCheckInTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vehicleCheckInTitleLabel.setText("SALIDA VEHICULAR");

        vehiclesDepartureVehicleState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OK", "RAYON(ES)", "GOLPE(S)", "DESCONOCIDO" }));

        vehiclesDepartureOwnerID.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        vehiclesDepartureCarPlate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        vehiclesDepartureButton.setText("DAR SALIDA");
        vehiclesDepartureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehiclesDepartureButtonActionPerformed(evt);
            }
        });

        goBackButton.setText("<-");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        developerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        developerLabel.setText("CASANAS SOFTWARE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vehicleCheckInTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(developerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(vehiclesDepartureVehicleState, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(vehiclesDepartureButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(vehiclesDepartureCarPlate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(vehiclesDepartureOwnerID, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vehicleCheckInTitleLabel)
                .addGap(18, 18, 18)
                .addComponent(vehiclesDepartureOwnerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vehiclesDepartureCarPlate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vehiclesDepartureVehicleState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(vehiclesDepartureButton)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(goBackButton)
                    .addComponent(developerLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vehiclesDepartureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehiclesDepartureButtonActionPerformed
        EmptyPlaces emptyPlaces = new EmptyPlaces();
        ParseUserInputs parseUserInputs = new ParseUserInputs();
        String[] vehicleInputData = new String[3], places = {"estado", "cedula", "placa"};;

        //Obtiene datos del vehiculo  ingresados en el formulario (Parsea vehicleState)
        String state = vehiclesDepartureVehicleState.getSelectedItem().toString();    // ESTA LINEA CAUSA ERROR, DA PARAMETRO BUENO EN LUGAR DE SU NUMERO
        vehicleInputData[0] = parseUserInputs.parseVehicleStateToCode(state);

        vehicleInputData[1] = vehiclesDepartureOwnerID.getText().toString().toLowerCase().trim();
        vehicleInputData[2] = vehiclesDepartureCarPlate.getText().toString().toLowerCase().trim();

        try {
            //Valida que campos no esten vacios; Vacio/Incompleto = true, No vacio = false
            boolean isEmpty = emptyPlaces.validateEmptyPlaces(vehicleInputData, places, this, 3);

            if (!isEmpty) {
                //Instancia clase manejo DB y pregunta si vehiculo sigue en parqueadero (Busqieda por placa)
                QueryManagment queryManagment = new QueryManagment();
                boolean stillHere = queryManagment.vehicleStillHere(vehicleInputData[2]);

                //Si sigue en parqueadero sigue proceso; Si no, muestra mensaje que vehiculo ya salio del parquedero
                if (stillHere) {
                    //Pide la informacion del vehiculo(TIPO VEHICULO) y lo envia a confirmDeparture()
                    String[] vehicleData = queryManagment.searchVehicle("plate", vehicleInputData[2]);
                    confirmDeparture(vehicleData, vehicleInputData);
                } else {
                    JOptionPane.showMessageDialog(this, "El vehiculo no se encuentra en el parqueadero");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Hay campos vacios");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_vehiclesDepartureButtonActionPerformed

    private void confirmDeparture(String[] vehicleData, String[] vehicleInputData) throws SQLException {
        //Instancia  Double y pregunta si va a cobrar tarifa regular
        double parkingPrice = 0;
        int rateType = JOptionPane.showConfirmDialog(this, "Desea cobrar la tarifa regular?");

        //Cobra tarifa regular 
        if (rateType == 0) {
            RatesManagment ratesManagment = new RatesManagment();

            //Obtiene desde parametros el tipo de vehiculo, en base al tipo de vehiculo establece su tarifa regular y la guarda en parkingPrice
            //Car = 1, Motorcycle = 2, Bike = 3
            if (vehicleData[1].equals("1")) {
                parkingPrice = ratesManagment.getCarRate();
            } else if (vehicleData[1].equals("2")) {
                parkingPrice = ratesManagment.getMotorcycleRate();
            } else if (vehicleData[1].equals("3")) {
                parkingPrice = ratesManagment.getBikeRate();
            }
        } else if (rateType == 1) {
            parkingPrice = Double.parseDouble(JOptionPane.showInputDialog("Ingrese el valor a cobrar"));
        }

        //Obtiene la fecha y hora parseada a String
        FormatDate formattedDate = new FormatDate();
        String date = formattedDate.format();

        //Instancia  UserManagment y QueryManagment
        UserManagment userManagment = new UserManagment();
        QueryManagment queryManagment = new QueryManagment();

        //Obtiene el ID del trabajador que tiene sesion iniciada y lo convierte a String
        String userId = String.valueOf(userManagment.getId());

        //Ejecuta el Checkout con los datos necesarios. (ID vehiculo, estado salida(El que esta en el combo box), quien realiza salida, fecha y hora salida)
        boolean checkout = queryManagment.checkOutVehicle(vehicleData[0], vehicleInputData[0], userId, date, parkingPrice);

        if (checkout) {
            //Crea la factura con todos los datos
            JOptionPane.showMessageDialog(this, "SALIDA COMPLETADA");
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo realizar la salida, intentelo de nuevo");
        }
    }

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
        dashboard.setLocationRelativeTo(null);
        this.setVisible(false);
    }//GEN-LAST:event_goBackButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VehicleCheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VehicleCheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VehicleCheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VehicleCheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VehicleCheckOut().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel developerLabel;
    private javax.swing.JButton goBackButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel vehicleCheckInTitleLabel;
    private javax.swing.JButton vehiclesDepartureButton;
    private javax.swing.JTextField vehiclesDepartureCarPlate;
    private javax.swing.JTextField vehiclesDepartureOwnerID;
    private javax.swing.JComboBox<String> vehiclesDepartureVehicleState;
    // End of variables declaration//GEN-END:variables
}
